//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication3.Entity
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class codaJournal : DbContext
    {
        public codaJournal()
            : base("name=codaJournal")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Action> Action { get; set; }
        public virtual DbSet<Address> Address { get; set; }
        public virtual DbSet<Box> Box { get; set; }
        public virtual DbSet<BusinessUnit> BusinessUnit { get; set; }
        public virtual DbSet<Classification> Classification { get; set; }
        public virtual DbSet<Contract> Contract { get; set; }
        public virtual DbSet<Department> Department { get; set; }
        public virtual DbSet<Directory> Directory { get; set; }
        public virtual DbSet<DocBoxLine> DocBoxLine { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Filial> Filial { get; set; }
        public virtual DbSet<Firm> Firm { get; set; }
        public virtual DbSet<JournalSale_Documents> JournalSale_Documents { get; set; }
        public virtual DbSet<Revenue> Revenue { get; set; }
        public virtual DbSet<Subject> Subject { get; set; }
        public virtual DbSet<TaxType> TaxType { get; set; }
        public virtual DbSet<CodaJson> CodaJson { get; set; }
        public virtual DbSet<DocTradeLine> DocTradeLine { get; set; }
    
        public virtual int JournalSalePaged_GetDocuments_Entity(Nullable<long> oID, string filter, string docOID, Nullable<long> objectID, Nullable<System.DateTime> begDate, Nullable<System.DateTime> endDate, string filterDocClassesXml, string filterStatusXml, Nullable<bool> isExtended, Nullable<bool> showDeleted, Nullable<bool> checkOperation, string securityUser, string securityGroup, Nullable<int> perPage, Nullable<int> pageNumber, string fullTextFilter, string orderFilter, ObjectParameter totalRows, ObjectParameter pages, string whereQuery, string whereQueryTableAlias, ObjectParameter tST)
        {
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var docOIDParameter = docOID != null ?
                new ObjectParameter("DocOID", docOID) :
                new ObjectParameter("DocOID", typeof(string));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(long));
    
            var begDateParameter = begDate.HasValue ?
                new ObjectParameter("BegDate", begDate) :
                new ObjectParameter("BegDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var filterDocClassesXmlParameter = filterDocClassesXml != null ?
                new ObjectParameter("FilterDocClassesXml", filterDocClassesXml) :
                new ObjectParameter("FilterDocClassesXml", typeof(string));
    
            var filterStatusXmlParameter = filterStatusXml != null ?
                new ObjectParameter("FilterStatusXml", filterStatusXml) :
                new ObjectParameter("FilterStatusXml", typeof(string));
    
            var isExtendedParameter = isExtended.HasValue ?
                new ObjectParameter("IsExtended", isExtended) :
                new ObjectParameter("IsExtended", typeof(bool));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var checkOperationParameter = checkOperation.HasValue ?
                new ObjectParameter("CheckOperation", checkOperation) :
                new ObjectParameter("CheckOperation", typeof(bool));
    
            var securityUserParameter = securityUser != null ?
                new ObjectParameter("SecurityUser", securityUser) :
                new ObjectParameter("SecurityUser", typeof(string));
    
            var securityGroupParameter = securityGroup != null ?
                new ObjectParameter("SecurityGroup", securityGroup) :
                new ObjectParameter("SecurityGroup", typeof(string));
    
            var perPageParameter = perPage.HasValue ?
                new ObjectParameter("PerPage", perPage) :
                new ObjectParameter("PerPage", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var fullTextFilterParameter = fullTextFilter != null ?
                new ObjectParameter("FullTextFilter", fullTextFilter) :
                new ObjectParameter("FullTextFilter", typeof(string));
    
            var orderFilterParameter = orderFilter != null ?
                new ObjectParameter("OrderFilter", orderFilter) :
                new ObjectParameter("OrderFilter", typeof(string));
    
            var whereQueryParameter = whereQuery != null ?
                new ObjectParameter("WhereQuery", whereQuery) :
                new ObjectParameter("WhereQuery", typeof(string));
    
            var whereQueryTableAliasParameter = whereQueryTableAlias != null ?
                new ObjectParameter("WhereQueryTableAlias", whereQueryTableAlias) :
                new ObjectParameter("WhereQueryTableAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("JournalSalePaged_GetDocuments_Entity", oIDParameter, filterParameter, docOIDParameter, objectIDParameter, begDateParameter, endDateParameter, filterDocClassesXmlParameter, filterStatusXmlParameter, isExtendedParameter, showDeletedParameter, checkOperationParameter, securityUserParameter, securityGroupParameter, perPageParameter, pageNumberParameter, fullTextFilterParameter, orderFilterParameter, totalRows, pages, whereQueryParameter, whereQueryTableAliasParameter, tST);
        }
    
        public virtual ObjectResult<JournalSale_Documents> GetDocuments(Nullable<long> oID, string filter, string docOID, Nullable<long> objectID, Nullable<System.DateTime> begDate, Nullable<System.DateTime> endDate, string filterDocClassesXml, string filterStatusXml, Nullable<bool> isExtended, Nullable<bool> showDeleted, Nullable<bool> checkOperation, string securityUser, string securityGroup, Nullable<int> perPage, Nullable<int> pageNumber, string fullTextFilter, string orderFilter, ObjectParameter totalRows, ObjectParameter pages, string whereQuery, string whereQueryTableAlias, ObjectParameter tST)
        {
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var docOIDParameter = docOID != null ?
                new ObjectParameter("DocOID", docOID) :
                new ObjectParameter("DocOID", typeof(string));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(long));
    
            var begDateParameter = begDate.HasValue ?
                new ObjectParameter("BegDate", begDate) :
                new ObjectParameter("BegDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var filterDocClassesXmlParameter = filterDocClassesXml != null ?
                new ObjectParameter("FilterDocClassesXml", filterDocClassesXml) :
                new ObjectParameter("FilterDocClassesXml", typeof(string));
    
            var filterStatusXmlParameter = filterStatusXml != null ?
                new ObjectParameter("FilterStatusXml", filterStatusXml) :
                new ObjectParameter("FilterStatusXml", typeof(string));
    
            var isExtendedParameter = isExtended.HasValue ?
                new ObjectParameter("IsExtended", isExtended) :
                new ObjectParameter("IsExtended", typeof(bool));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var checkOperationParameter = checkOperation.HasValue ?
                new ObjectParameter("CheckOperation", checkOperation) :
                new ObjectParameter("CheckOperation", typeof(bool));
    
            var securityUserParameter = securityUser != null ?
                new ObjectParameter("SecurityUser", securityUser) :
                new ObjectParameter("SecurityUser", typeof(string));
    
            var securityGroupParameter = securityGroup != null ?
                new ObjectParameter("SecurityGroup", securityGroup) :
                new ObjectParameter("SecurityGroup", typeof(string));
    
            var perPageParameter = perPage.HasValue ?
                new ObjectParameter("PerPage", perPage) :
                new ObjectParameter("PerPage", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var fullTextFilterParameter = fullTextFilter != null ?
                new ObjectParameter("FullTextFilter", fullTextFilter) :
                new ObjectParameter("FullTextFilter", typeof(string));
    
            var orderFilterParameter = orderFilter != null ?
                new ObjectParameter("OrderFilter", orderFilter) :
                new ObjectParameter("OrderFilter", typeof(string));
    
            var whereQueryParameter = whereQuery != null ?
                new ObjectParameter("WhereQuery", whereQuery) :
                new ObjectParameter("WhereQuery", typeof(string));
    
            var whereQueryTableAliasParameter = whereQueryTableAlias != null ?
                new ObjectParameter("WhereQueryTableAlias", whereQueryTableAlias) :
                new ObjectParameter("WhereQueryTableAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalSale_Documents>("GetDocuments", oIDParameter, filterParameter, docOIDParameter, objectIDParameter, begDateParameter, endDateParameter, filterDocClassesXmlParameter, filterStatusXmlParameter, isExtendedParameter, showDeletedParameter, checkOperationParameter, securityUserParameter, securityGroupParameter, perPageParameter, pageNumberParameter, fullTextFilterParameter, orderFilterParameter, totalRows, pages, whereQueryParameter, whereQueryTableAliasParameter, tST);
        }
    
        public virtual ObjectResult<JournalSale_Documents> GetDocuments(Nullable<long> oID, string filter, string docOID, Nullable<long> objectID, Nullable<System.DateTime> begDate, Nullable<System.DateTime> endDate, string filterDocClassesXml, string filterStatusXml, Nullable<bool> isExtended, Nullable<bool> showDeleted, Nullable<bool> checkOperation, string securityUser, string securityGroup, Nullable<int> perPage, Nullable<int> pageNumber, string fullTextFilter, string orderFilter, ObjectParameter totalRows, ObjectParameter pages, string whereQuery, string whereQueryTableAlias, ObjectParameter tST, MergeOption mergeOption)
        {
            var oIDParameter = oID.HasValue ?
                new ObjectParameter("OID", oID) :
                new ObjectParameter("OID", typeof(long));
    
            var filterParameter = filter != null ?
                new ObjectParameter("Filter", filter) :
                new ObjectParameter("Filter", typeof(string));
    
            var docOIDParameter = docOID != null ?
                new ObjectParameter("DocOID", docOID) :
                new ObjectParameter("DocOID", typeof(string));
    
            var objectIDParameter = objectID.HasValue ?
                new ObjectParameter("ObjectID", objectID) :
                new ObjectParameter("ObjectID", typeof(long));
    
            var begDateParameter = begDate.HasValue ?
                new ObjectParameter("BegDate", begDate) :
                new ObjectParameter("BegDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var filterDocClassesXmlParameter = filterDocClassesXml != null ?
                new ObjectParameter("FilterDocClassesXml", filterDocClassesXml) :
                new ObjectParameter("FilterDocClassesXml", typeof(string));
    
            var filterStatusXmlParameter = filterStatusXml != null ?
                new ObjectParameter("FilterStatusXml", filterStatusXml) :
                new ObjectParameter("FilterStatusXml", typeof(string));
    
            var isExtendedParameter = isExtended.HasValue ?
                new ObjectParameter("IsExtended", isExtended) :
                new ObjectParameter("IsExtended", typeof(bool));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var checkOperationParameter = checkOperation.HasValue ?
                new ObjectParameter("CheckOperation", checkOperation) :
                new ObjectParameter("CheckOperation", typeof(bool));
    
            var securityUserParameter = securityUser != null ?
                new ObjectParameter("SecurityUser", securityUser) :
                new ObjectParameter("SecurityUser", typeof(string));
    
            var securityGroupParameter = securityGroup != null ?
                new ObjectParameter("SecurityGroup", securityGroup) :
                new ObjectParameter("SecurityGroup", typeof(string));
    
            var perPageParameter = perPage.HasValue ?
                new ObjectParameter("PerPage", perPage) :
                new ObjectParameter("PerPage", typeof(int));
    
            var pageNumberParameter = pageNumber.HasValue ?
                new ObjectParameter("PageNumber", pageNumber) :
                new ObjectParameter("PageNumber", typeof(int));
    
            var fullTextFilterParameter = fullTextFilter != null ?
                new ObjectParameter("FullTextFilter", fullTextFilter) :
                new ObjectParameter("FullTextFilter", typeof(string));
    
            var orderFilterParameter = orderFilter != null ?
                new ObjectParameter("OrderFilter", orderFilter) :
                new ObjectParameter("OrderFilter", typeof(string));
    
            var whereQueryParameter = whereQuery != null ?
                new ObjectParameter("WhereQuery", whereQuery) :
                new ObjectParameter("WhereQuery", typeof(string));
    
            var whereQueryTableAliasParameter = whereQueryTableAlias != null ?
                new ObjectParameter("WhereQueryTableAlias", whereQueryTableAlias) :
                new ObjectParameter("WhereQueryTableAlias", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<JournalSale_Documents>("GetDocuments", mergeOption, oIDParameter, filterParameter, docOIDParameter, objectIDParameter, begDateParameter, endDateParameter, filterDocClassesXmlParameter, filterStatusXmlParameter, isExtendedParameter, showDeletedParameter, checkOperationParameter, securityUserParameter, securityGroupParameter, perPageParameter, pageNumberParameter, fullTextFilterParameter, orderFilterParameter, totalRows, pages, whereQueryParameter, whereQueryTableAliasParameter, tST);
        }
    
        public virtual ObjectResult<CodaJson> Directory_FindMatching_Remote_Short(string className, string fieldName, Nullable<long> parentID, string searchString, Nullable<bool> showDeleted, Nullable<int> topRecords, string groupsXMLvarchar)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var topRecordsParameter = topRecords.HasValue ?
                new ObjectParameter("TopRecords", topRecords) :
                new ObjectParameter("TopRecords", typeof(int));
    
            var groupsXMLvarcharParameter = groupsXMLvarchar != null ?
                new ObjectParameter("GroupsXMLvarchar", groupsXMLvarchar) :
                new ObjectParameter("GroupsXMLvarchar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CodaJson>("Directory_FindMatching_Remote_Short", classNameParameter, fieldNameParameter, parentIDParameter, searchStringParameter, showDeletedParameter, topRecordsParameter, groupsXMLvarcharParameter);
        }
    
        public virtual ObjectResult<CodaJson> Directory_FindMatching_Remote_Short(string className, string fieldName, Nullable<long> parentID, string searchString, Nullable<bool> showDeleted, Nullable<int> topRecords, string groupsXMLvarchar, MergeOption mergeOption)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var topRecordsParameter = topRecords.HasValue ?
                new ObjectParameter("TopRecords", topRecords) :
                new ObjectParameter("TopRecords", typeof(int));
    
            var groupsXMLvarcharParameter = groupsXMLvarchar != null ?
                new ObjectParameter("GroupsXMLvarchar", groupsXMLvarchar) :
                new ObjectParameter("GroupsXMLvarchar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CodaJson>("Directory_FindMatching_Remote_Short", mergeOption, classNameParameter, fieldNameParameter, parentIDParameter, searchStringParameter, showDeletedParameter, topRecordsParameter, groupsXMLvarcharParameter);
        }
    
        public virtual ObjectResult<CodaJson> FindObject(string className, string fieldName, Nullable<long> parentID, string searchString, Nullable<bool> showDeleted, Nullable<int> topRecords, string groupsXMLvarchar)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var topRecordsParameter = topRecords.HasValue ?
                new ObjectParameter("TopRecords", topRecords) :
                new ObjectParameter("TopRecords", typeof(int));
    
            var groupsXMLvarcharParameter = groupsXMLvarchar != null ?
                new ObjectParameter("GroupsXMLvarchar", groupsXMLvarchar) :
                new ObjectParameter("GroupsXMLvarchar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CodaJson>("FindObject", classNameParameter, fieldNameParameter, parentIDParameter, searchStringParameter, showDeletedParameter, topRecordsParameter, groupsXMLvarcharParameter);
        }
    
        public virtual ObjectResult<CodaJson> FindObject(string className, string fieldName, Nullable<long> parentID, string searchString, Nullable<bool> showDeleted, Nullable<int> topRecords, string groupsXMLvarchar, MergeOption mergeOption)
        {
            var classNameParameter = className != null ?
                new ObjectParameter("ClassName", className) :
                new ObjectParameter("ClassName", typeof(string));
    
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var topRecordsParameter = topRecords.HasValue ?
                new ObjectParameter("TopRecords", topRecords) :
                new ObjectParameter("TopRecords", typeof(int));
    
            var groupsXMLvarcharParameter = groupsXMLvarchar != null ?
                new ObjectParameter("GroupsXMLvarchar", groupsXMLvarchar) :
                new ObjectParameter("GroupsXMLvarchar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CodaJson>("FindObject", mergeOption, classNameParameter, fieldNameParameter, parentIDParameter, searchStringParameter, showDeletedParameter, topRecordsParameter, groupsXMLvarcharParameter);
        }
    
        public virtual int DocTradeLine_GetChildren(Nullable<long> parentID, Nullable<bool> showDeleted, Nullable<bool> isExtended, ObjectParameter tST)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var isExtendedParameter = isExtended.HasValue ?
                new ObjectParameter("IsExtended", isExtended) :
                new ObjectParameter("IsExtended", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocTradeLine_GetChildren", parentIDParameter, showDeletedParameter, isExtendedParameter, tST);
        }
    
        public virtual ObjectResult<DocTradeLine> GetLines(Nullable<long> parentID, Nullable<bool> showDeleted, Nullable<bool> isExtended, ObjectParameter tST)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var isExtendedParameter = isExtended.HasValue ?
                new ObjectParameter("IsExtended", isExtended) :
                new ObjectParameter("IsExtended", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("GetLines", parentIDParameter, showDeletedParameter, isExtendedParameter, tST);
        }
    
        public virtual ObjectResult<DocTradeLine> GetLines(Nullable<long> parentID, Nullable<bool> showDeleted, Nullable<bool> isExtended, ObjectParameter tST, MergeOption mergeOption)
        {
            var parentIDParameter = parentID.HasValue ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(long));
    
            var showDeletedParameter = showDeleted.HasValue ?
                new ObjectParameter("ShowDeleted", showDeleted) :
                new ObjectParameter("ShowDeleted", typeof(bool));
    
            var isExtendedParameter = isExtended.HasValue ?
                new ObjectParameter("IsExtended", isExtended) :
                new ObjectParameter("IsExtended", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("GetLines", mergeOption, parentIDParameter, showDeletedParameter, isExtendedParameter, tST);
        }
    
        public virtual int DocTradeLine_CreateBatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DocTradeLine_CreateBatch");
        }
    
        public virtual ObjectResult<DocTradeLine> DocTradeLine_UpdateBatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("DocTradeLine_UpdateBatch");
        }
    
        public virtual ObjectResult<DocTradeLine> DocTradeLine_UpdateBatch(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("DocTradeLine_UpdateBatch", mergeOption);
        }
    
        public virtual ObjectResult<DocTradeLine> Line_CreateBatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("Line_CreateBatch");
        }
    
        public virtual ObjectResult<DocTradeLine> Line_CreateBatch(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("Line_CreateBatch", mergeOption);
        }
    
        public virtual ObjectResult<DocTradeLine> Line_UpdateBatch()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("Line_UpdateBatch");
        }
    
        public virtual ObjectResult<DocTradeLine> Line_UpdateBatch(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DocTradeLine>("Line_UpdateBatch", mergeOption);
        }
    }
}
