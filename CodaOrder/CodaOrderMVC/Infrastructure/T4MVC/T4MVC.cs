// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
#pragma warning disable 1591, 3008, 3009
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    public static iOrder.Controllers.AccountController Account = new iOrder.Controllers.T4MVC_AccountController();
    public static iOrder.Controllers.DirectiveController Directive = new iOrder.Controllers.T4MVC_DirectiveController();
    public static iOrder.Controllers.DocumentController Document = new iOrder.Controllers.T4MVC_DocumentController();
    public static iOrder.Controllers.ErrorController Error = new iOrder.Controllers.T4MVC_ErrorController();
    public static iOrder.Controllers.SearchCodaObjectController SearchCodaObject = new iOrder.Controllers.T4MVC_SearchCodaObjectController();
    public static iOrder.Controllers.TemplateController Template = new iOrder.Controllers.T4MVC_TemplateController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_PartialViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_JsonResult : System.Web.Mvc.JsonResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_JsonResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class _3rdparty {
            private const string URLPATH = "~/Scripts/3rdparty";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
            public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
            public static readonly string Date_min_js = Url("Date.min.js");
            public static readonly string errors_json = Url("errors.json");
            public static readonly string linq_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/linq-vsdoc.min.js") ? Url("linq-vsdoc.min.js") : Url("linq-vsdoc.js");
            public static readonly string linq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/linq.min.js") ? Url("linq.min.js") : Url("linq.js");
            public static readonly string linq_min_js = Url("linq.min.js");
            public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
            public static readonly string ng_grid_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ng-grid.min.js") ? Url("ng-grid.min.js") : Url("ng-grid.js");
            public static readonly string ng_grid_min_js = Url("ng-grid.min.js");
            public static readonly string spin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/spin.min.js") ? Url("spin.min.js") : Url("spin.js");
            public static readonly string spin_min_js = Url("spin.min.js");
            public static readonly string version_json = Url("version.json");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class angular_source {
            private const string URLPATH = "~/Scripts/angular_source";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string angular_resource_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-resource.min.js") ? Url("angular-resource.min.js") : Url("angular-resource.js");
            public static readonly string angular_resource_min_js = Url("angular-resource.min.js");
            public static readonly string angular_resource_min_js_map = Url("angular-resource.min.js.map");
            public static readonly string angular_route_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-route.min.js") ? Url("angular-route.min.js") : Url("angular-route.js");
            public static readonly string angular_route_min_js = Url("angular-route.min.js");
            public static readonly string angular_route_min_js_map = Url("angular-route.min.js.map");
            public static readonly string angular_sanitize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-sanitize.min.js") ? Url("angular-sanitize.min.js") : Url("angular-sanitize.js");
            public static readonly string angular_sanitize_min_js = Url("angular-sanitize.min.js");
            public static readonly string angular_sanitize_min_js_map = Url("angular-sanitize.min.js.map");
            public static readonly string angular_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular.min.js") ? Url("angular.min.js") : Url("angular.js");
            public static readonly string angular_min_js = Url("angular.min.js");
            public static readonly string angular_min_js_map = Url("angular.min.js.map");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class not_used {
                private const string URLPATH = "~/Scripts/angular_source/not_used";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string angular_animate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-animate.min.js") ? Url("angular-animate.min.js") : Url("angular-animate.js");
                public static readonly string angular_animate_min_js = Url("angular-animate.min.js");
                public static readonly string angular_animate_min_js_map = Url("angular-animate.min.js.map");
                public static readonly string angular_aria_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-aria.min.js") ? Url("angular-aria.min.js") : Url("angular-aria.js");
                public static readonly string angular_aria_min_js = Url("angular-aria.min.js");
                public static readonly string angular_aria_min_js_map = Url("angular-aria.min.js.map");
                public static readonly string angular_cookies_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-cookies.min.js") ? Url("angular-cookies.min.js") : Url("angular-cookies.js");
                public static readonly string angular_cookies_min_js = Url("angular-cookies.min.js");
                public static readonly string angular_cookies_min_js_map = Url("angular-cookies.min.js.map");
                public static readonly string angular_csp_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-csp.min.css") ? Url("angular-csp.min.css") : Url("angular-csp.css");
                     
                public static readonly string angular_loader_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-loader.min.js") ? Url("angular-loader.min.js") : Url("angular-loader.js");
                public static readonly string angular_loader_min_js = Url("angular-loader.min.js");
                public static readonly string angular_loader_min_js_map = Url("angular-loader.min.js.map");
                public static readonly string angular_messages_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-messages.min.js") ? Url("angular-messages.min.js") : Url("angular-messages.js");
                public static readonly string angular_messages_min_js = Url("angular-messages.min.js");
                public static readonly string angular_messages_min_js_map = Url("angular-messages.min.js.map");
                public static readonly string angular_mocks_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-mocks.min.js") ? Url("angular-mocks.min.js") : Url("angular-mocks.js");
                public static readonly string angular_scenario_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-scenario.min.js") ? Url("angular-scenario.min.js") : Url("angular-scenario.js");
                public static readonly string angular_touch_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-touch.min.js") ? Url("angular-touch.min.js") : Url("angular-touch.js");
                public static readonly string angular_touch_min_js = Url("angular-touch.min.js");
                public static readonly string angular_touch_min_js_map = Url("angular-touch.min.js.map");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class angular_ui {
            private const string URLPATH = "~/Scripts/angular_ui";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string angular_cache_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-cache.min.js") ? Url("angular-cache.min.js") : Url("angular-cache.js");
            public static readonly string angular_cache_min_js = Url("angular-cache.min.js");
            public static readonly string angular_cache_min_map = Url("angular-cache.min.map");
            public static readonly string angular_spinner_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-spinner.min.js") ? Url("angular-spinner.min.js") : Url("angular-spinner.js");
            public static readonly string angular_spinner_min_js = Url("angular-spinner.min.js");
            public static readonly string angular_spinner_min_js_map = Url("angular-spinner.min.js.map");
            public static readonly string angular_ui_router_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular-ui-router.min.js") ? Url("angular-ui-router.min.js") : Url("angular-ui-router.js");
            public static readonly string angular_ui_router_min_js = Url("angular-ui-router.min.js");
            public static readonly string ui_bootstrap_tpls_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui-bootstrap-tpls.min.js") ? Url("ui-bootstrap-tpls.min.js") : Url("ui-bootstrap-tpls.js");
            public static readonly string ui_bootstrap_tpls_min_js = Url("ui-bootstrap-tpls.min.js");
            public static readonly string ui_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui-bootstrap.min.js") ? Url("ui-bootstrap.min.js") : Url("ui-bootstrap.js");
            public static readonly string ui_bootstrap_min_js = Url("ui-bootstrap.min.js");
            public static readonly string ui_select_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui-select.min.js") ? Url("ui-select.min.js") : Url("ui-select.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class app {
            private const string URLPATH = "~/Scripts/app";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class account {
                private const string URLPATH = "~/Scripts/app/account";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class controller {
                    private const string URLPATH = "~/Scripts/app/account/controller";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ProfileController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProfileController.min.js") ? Url("ProfileController.min.js") : Url("ProfileController.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class service {
                    private const string URLPATH = "~/Scripts/app/account/service";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string ProfileService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ProfileService.min.js") ? Url("ProfileService.min.js") : Url("ProfileService.js");
                }
            
            }
        
            public static readonly string app_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/app.min.js") ? Url("app.min.js") : Url("app.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class common {
                private const string URLPATH = "~/Scripts/app/common";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string date_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/date.min.js") ? Url("date.min.js") : Url("date.js");
                public static readonly string FilterService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/FilterService.min.js") ? Url("FilterService.min.js") : Url("FilterService.js");
                public static readonly string ParameterService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ParameterService.min.js") ? Url("ParameterService.min.js") : Url("ParameterService.js");
            }
        
            public static readonly string Constant_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Constant.min.js") ? Url("Constant.min.js") : Url("Constant.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class document {
                private const string URLPATH = "~/Scripts/app/document";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class controller {
                    private const string URLPATH = "~/Scripts/app/document/controller";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string DocumentDateController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DocumentDateController.min.js") ? Url("DocumentDateController.min.js") : Url("DocumentDateController.js");
                    public static readonly string DocumentGridController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DocumentGridController.min.js") ? Url("DocumentGridController.min.js") : Url("DocumentGridController.js");
                    public static readonly string DocumentLoadController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DocumentLoadController.min.js") ? Url("DocumentLoadController.min.js") : Url("DocumentLoadController.js");
                    public static readonly string DocumentPaginationController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DocumentPaginationController.min.js") ? Url("DocumentPaginationController.min.js") : Url("DocumentPaginationController.js");
                    public static readonly string DocumentTypeController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DocumentTypeController.min.js") ? Url("DocumentTypeController.min.js") : Url("DocumentTypeController.js");
                    public static readonly string LineGridController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/LineGridController.min.js") ? Url("LineGridController.min.js") : Url("LineGridController.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class directive {
                    private const string URLPATH = "~/Scripts/app/document/directive";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string DateDirecive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DateDirecive.min.js") ? Url("DateDirecive.min.js") : Url("DateDirecive.js");
                    public static readonly string LeftMenuLinksDirective_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/LeftMenuLinksDirective.min.js") ? Url("LeftMenuLinksDirective.min.js") : Url("LeftMenuLinksDirective.js");
                    public static readonly string ShowErrorDirective_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ShowErrorDirective.min.js") ? Url("ShowErrorDirective.min.js") : Url("ShowErrorDirective.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class service {
                    private const string URLPATH = "~/Scripts/app/document/service";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string DocumentGridService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/DocumentGridService.min.js") ? Url("DocumentGridService.min.js") : Url("DocumentGridService.js");
                    public static readonly string ErrorService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ErrorService.min.js") ? Url("ErrorService.min.js") : Url("ErrorService.js");
                    public static readonly string GridService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/GridService.min.js") ? Url("GridService.min.js") : Url("GridService.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class template {
                    private const string URLPATH = "~/Scripts/app/document/template";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string DirDatePicker_html = Url("DirDatePicker.html");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class search {
                private const string URLPATH = "~/Scripts/app/search";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string SearchCodaObjectController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/SearchCodaObjectController.min.js") ? Url("SearchCodaObjectController.min.js") : Url("SearchCodaObjectController.js");
                public static readonly string SearchCodaObjectService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/SearchCodaObjectService.min.js") ? Url("SearchCodaObjectService.min.js") : Url("SearchCodaObjectService.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class subject {
                private const string URLPATH = "~/Scripts/app/subject";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string GridController_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/GridController.min.js") ? Url("GridController.min.js") : Url("GridController.js");
                public static readonly string GridService_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/GridService.min.js") ? Url("GridService.min.js") : Url("GridService.js");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class test {
                private const string URLPATH = "~/Scripts/app/test";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string karma_conf_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/karma.conf.min.js") ? Url("karma.conf.min.js") : Url("karma.conf.js");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class unit {
                    private const string URLPATH = "~/Scripts/app/test/unit";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class document {
                        private const string URLPATH = "~/Scripts/app/test/unit/document";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string controllerSpec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/controllerSpec.min.js") ? Url("controllerSpec.min.js") : Url("controllerSpec.js");
                        public static readonly string directiveSpec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/directiveSpec.min.js") ? Url("directiveSpec.min.js") : Url("directiveSpec.js");
                        public static readonly string serviceSpec_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/serviceSpec.min.js") ? Url("serviceSpec.min.js") : Url("serviceSpec.js");
                    }
                
                }
            
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class jquery {
            private const string URLPATH = "~/Scripts/jquery";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_2_1_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.intellisense.min.js") ? Url("jquery-2.1.1.intellisense.min.js") : Url("jquery-2.1.1.intellisense.js");
            public static readonly string jquery_2_1_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-2.1.1.min.js") ? Url("jquery-2.1.1.min.js") : Url("jquery-2.1.1.js");
            public static readonly string jquery_2_1_1_min_js = Url("jquery-2.1.1.min.js");
            public static readonly string jquery_2_1_1_min_map = Url("jquery-2.1.1.min.map");
            public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
            public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
            public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
            public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
            public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string angular_grid_custom_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/angular_grid_custom.min.css") ? Url("angular_grid_custom.min.css") : Url("angular_grid_custom.css");
             
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class img {
            private const string URLPATH = "~/Content/img";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string _404_png = Url("404.png");
            public static readonly string logo_png = Url("logo.png");
        }
    
        public static readonly string ng_grid_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ng-grid.min.css") ? Url("ng-grid.min.css") : Url("ng-grid.css");
             
        public static readonly string ng_grid_min_css = Url("ng-grid.min.css");
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
        public static readonly string ui_select_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ui-select.min.css") ? Url("ui-select.min.css") : Url("ui-select.css");
             
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009


